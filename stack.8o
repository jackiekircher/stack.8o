# implementing a stack in chip8
#   currently uses `ve as a temp register to hold the stack pointer, so
#   DON'T USE PSEUDO COMPARISONS inside of push/pop
#
#   does this work? find out next time

:const stacklimit 42              # this should be a multiple of 14

: stack-pointer
  0 0 0 0

: stack
  0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0

: stack-buffer                     # catch a potential stack overflow
  0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0

: push
  i := stack-pointer
  load ve - ve

  # don't overflow the stack
  if ve == stacklimit begin
    :breakpoint warning-stack-overflow
    return
  end

  i := stack
  i += ve
  save v0 - vd

  # increment the stack pointer 
  ve += 14
  i := stack-pointer
  save ve - ve
;

: pop
  i := stack-pointer
  load ve - ve

  # if the stack pointer is 0 there is nothing to pop
  if ve == 0 begin
    :breakpoint warning-stack-underflow
    return
  end

  # decrement the stack pointer
  ve += -14
  save ve - ve

  i := stack
  i += ve
  load v0 - vd
;


#################################
#
# tests
#

: current-test
  0

# 0 = fail
# 1 = pass
: test-status
  1 1 1 1

# run all tests
: main

: test-push
  reset-stack
  fill-registers
  push

  # the values are actually saved to the stack
  vd := -1
  loop
    vd += 1
    while vd < 14
      i := stack
      i += vd
      load v0
      if v0 != 8 begin
        :breakpoint failed-push
        fail-test
        return
      end
  again

  # the stack pointer is incremented
  i := stack-pointer
  load v0
  if v0 != 14 begin
    :breakpoint failed-push-did-not-increment-stack-pointer
    fail-test
  end

  next-test
#;

: test-pop
  reset-stack
  fill-registers
  push
  change-registers
  pop

  # all values are restored correctly
  vd := -1
  loop
    vd += 1
    while vd < 14
      i := stack
      i += vd
      load v0
      if v0 != 8 begin
        :breakpoint failed-pop
        fail-test
        return
      end
  again

  # the stack pointer is decremented correctly
  i := stack-pointer
  load v0
  if v0 != 0 begin
    :breakpoint failed-pop-did-not-decrement-stack-pointer
    fail-test
  end

  next-test
#;

: test-stack-underflow
  reset-stack

  fill-registers
  push
  pop
  change-registers
  pop

  # pop on an empty stack does not load from the stack
  ve := 0
  if v0 != 2 then ve := 1
  if v1 != 2 then ve := 1
  if v2 != 2 then ve := 1
  if v3 != 2 then ve := 1
  if v4 != 2 then ve := 1
  if v5 != 2 then ve := 1
  if v6 != 2 then ve := 1
  if v7 != 2 then ve := 1
  if v8 != 2 then ve := 1
  if v9 != 2 then ve := 1
  if va != 2 then ve := 1
  if vb != 2 then ve := 1
  if vc != 2 then ve := 1
  if vd != 2 then ve := 1

  if ve == 1 begin
    :breakpoint failed-pop-empty-loaded-empty-stack
    fail-test
    return
  end

  # the stack pointer is not decremented below zero
  i := stack-pointer
  load v0
  if v0 < 0 begin
    :breakpoint failed-pop-decremented-stack-pointer-below-zero
    fail-test
  end

  next-test
#;

: test-stack-overflow
  fill-registers
  push
  push
  push
  push

  # the stack pointer is not incremented above 42
  i := stack-pointer
  load v0
  if v0 > 42 begin
    :breakpoint failed-push-incremented-stack-pointer-above-limit
    fail-test
  end

  # the values are not saved to the stack buffer
  vd := -1
  loop
    vd += 1
    while vd < 14
      i := stack-buffer
      i += vd
      load v0
      if v0 != 0 begin
        :breakpoint failed-push-caused-a-stack-overflow
        fail-test
        return
      end
  again

  next-test
#;

: report-status
  vd := -1

  loop
    vd += 1
    while vd < 2
      i := test-status
      i += vd
      load v0
      if v0 != 1 begin
        # if any test fails it's already been reported so we can exit
        exit
      end
  again

  :breakpoint all-tests-pass
  exit
;


#################################
#
# test helpers
#

: fail-test
  # determine the current test
  i  := current-test
  load v0

  # save 0, a failing score, to the test status
  i  := test-status
  i  += v0
  v0 := 0
  save v0
;

: next-test
  i  := current-test
  load v0
  v0 += 1
  save v0
;

: reset-stack
  v0 := 0
  i  := stack-pointer
  save v0
;

: fill-registers
  v0 := 8
  v1 := 8
  v2 := 8
  v3 := 8
  v4 := 8
  v5 := 8
  v6 := 8
  v7 := 8
  v8 := 8
  v9 := 8
  va := 8
  vb := 8
  vc := 8
  vd := 8
;

: change-registers
  v0 := 2
  v1 := 2
  v2 := 2
  v3 := 2
  v4 := 2
  v5 := 2
  v6 := 2
  v7 := 2
  v8 := 2
  v9 := 2
  va := 2
  vb := 2
  vc := 2
  vd := 2
;
