# implementing a stack in chip8
#   currently uses `ve as a temp register to hold the stack pointer, so
#   DON'T USE PSEUDO COMPARISONS inside of push/pop
#
#   does this work? find out next time

: stack-pointer
  0 0 0 0

: stack
  0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0
  0 0 0 0 0 0 0 0 0 0 0 0 0 0

: main
  loop
    fill-registers
    :breakpoint push
    push
    change-registers
    :breakpoint changed
    pop
    :breakpoint pop
  again
;

: fill-registers
  v0 := 8
  v1 := 8
  v2 := 8
  v3 := 8
  v4 := 8
  v5 := 8
  v6 := 8
  v7 := 8
  v8 := 8
  v9 := 8
  va := 8
  vb := 8
  vc := 8
  vd := 8
;

: change-registers
  v0 := 2
  v1 := 2
  v2 := 2
  v3 := 2
  v4 := 2
  v5 := 2
  v6 := 2
  v7 := 2
  v8 := 2
  v9 := 2
  va := 2
  vb := 2
  vc := 2
  vd := 2
;

: push
  i := stack-pointer
  load ve - ve

  i := stack
  i += ve
  save v0 - vd

  # increment the stack pointer 
  ve += 14
  i := stack-pointer
  save ve - ve
;

: pop
  i := stack-pointer
  load ve - ve

  # if the stack pointer is 0 there is nothing to pop
  if ve == 0 then return

  # decrement the stack pointer
  ve += -14
  save ve - ve

  i := stack
  i += ve
  load v0 - vd
;
